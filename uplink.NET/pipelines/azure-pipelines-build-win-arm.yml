# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-20.04'

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'specific'
    project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
    definition: '31'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    itemPattern: |
      **
      !*.cs
      !*.dll
      !win-x86-dll
      !win-x64-dll
      !Csharp-files
    targetPath: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get build-artifacts'

- script: |
    ls
    ls uplink-c
    mv storj_uplink_second_wrap/storj_uplink_second_wrap.c uplink-c/storj_uplink_second_wrap.c
  displayName: 'Prepare for Target ARM'

- task: GoTool@0
  inputs:
    version: '$(GOLANG_VERSION)'
  displayName: 'Install Go $(GOLANG_VERSION)'

- script: |
    sudo snap install zig --classic --edge
    zig version
    echo "*** realpath"
    realpath /snap/zig/3678/lib/libc/mingw/math/
    realpath /snap/zig/3678/lib/libc/mingw/math/cephes_emath.c
    echo "*** ll"
    ll /snap/zig/3678/lib/libc/mingw/math/
    ll /snap/zig/3678/lib/libc/mingw/math/cephes_emath.c
    cd /snap/zig/3678/lib/libc/mingw/math/
    ls
    sudo wget https://raw.githubusercontent.com/ziglang/zig/de04ee9213f284cc277d35a409b7f821fb09b456/lib/libc/mingw/math/bsd_private_base.h
    echo "downloaded"
    ls
    echo "done"
  displayName: 'Install cross compiler for Windows'

- script: |
    cd uplink-c
    go get -u golang.org/x/sys
    echo "*** make symlink"
    mkdir math
    cp -r -a /snap/zig/3678/lib/libc/mingw/math/. ./math/
    echo "** listing math"
    ls ./math
    cd math
    sudo wget https://raw.githubusercontent.com/ziglang/zig/de04ee9213f284cc277d35a409b7f821fb09b456/lib/libc/mingw/math/bsd_private_base.h
    cd ..
    sudo mount --bind -o nodev,ro $(pwd)/math /snap/zig/3678/lib/libc/mingw/math
    echo "*** make symlink done"
    export PATH=$PATH:$(pwd)
    echo "Kann ersetzt werden durch 'zig cc'"
    echo $'#!/bin/sh \n zig cc -target aarch64-windows-gnu -v $@' >> zcc
    sudo chmod +x zcc
    echo $'#!/bin/sh \n zig c++ -target aarch64-windows-gnu -v $@' >> zxx
    sudo chmod +x zxx
    echo $'#!/bin/sh \n zig ar -v $@' >> zar
    sudo chmod +x zar
    export CC="zcc"
    export CXX="zxx"
    export AR="zar"
    export GOOS="windows"
    export GOARCH="arm64"
    export GOARM=7
    export CGO_ENABLED="1"
    go build -ldflags="-s -w" -o storj_uplink.dll -buildmode c-shared -tags extended -v
    echo "Build succeeded"
    ls -al
  displayName: 'Test-Generate Win-ARM'
