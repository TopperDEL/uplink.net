# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-20.04'

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'specific'
    project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
    definition: '31'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    itemPattern: |
      **
      !*.cs
      !*.dll
      !win-x86-dll
      !win-x64-dll
      !Csharp-files
    targetPath: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get build-artifacts'

- script: |
    ls
    ls uplink-c
    #rm uplink-c/util.go
    rm uplink-c/upload.go
    #rm uplink-c/scope.go
    rm uplink-c/restrict_scope_helper.go
    rm uplink-c/project.go
    rm uplink-c/objects.go
    rm uplink-c/object.go
    rm uplink-c/multipart.go
    #rm uplink-c/handles_test.go
    #rm uplink-c/handles.go
    #rm uplink-c/error.go
    #rm uplink-c/encryption.go
    rm uplink-c/edge_share.go
    rm uplink-c/edge_access.go
    rm uplink-c/download.go
    #rm uplink-c/custommetadata_test.go
    #rm uplink-c/custommetadata.go
    rm uplink-c/custom_metadata_helper.go
    rm uplink-c/config.go
    rm uplink-c/buckets.go
    rm uplink-c/bucket.go
    #rm uplink-c/access.go
    sed -i uplink-c/access.go -re '22,223d'
    echo "deleted"
    ls uplink-c
    #mv storj_uplink_second_wrap/storj_uplink_second_wrap.c uplink-c/storj_uplink_second_wrap.c
  displayName: 'Prepare for Target ARM'

- task: GoTool@0
  inputs:
    version: '$(GOLANG_VERSION)'
  displayName: 'Install Go $(GOLANG_VERSION)'

- script: |
    sudo snap install zig --classic --edge
    zig version
  displayName: 'Install Zig'

- script: |
    cd uplink-c
    #go get -u golang.org/x/sys
    #echo "*** make symlink"
    #mkdir math
    #cp -r -a /snap/zig/3678/lib/libc/mingw/math/. ./math/
    #echo "** listing math"
    #ls ./math
    #cd math
    #sudo wget https://raw.githubusercontent.com/ziglang/zig/de04ee9213f284cc277d35a409b7f821fb09b456/lib/libc/mingw/math/bsd_private_base.h
    #cd ..
    #sudo mount --bind -o nodev,ro $(pwd)/math /snap/zig/3678/lib/libc/mingw/math
    #echo "*** make symlink done"
    export PATH=$PATH:$(pwd)
    echo "Kann ersetzt werden durch 'zig cc'"
    echo $'#!/bin/sh \n zig cc -target aarch64-windows-gnu -mtune=cortex-a75 -mcpu=cortex_a75 -fno-sanitize-trap=undefined -fno-sanitize=undefined -v $@' >> zcc
    sudo chmod +x zcc
    echo $'#!/bin/sh \n zig c++ -target aarch64-windows-gnu -mtune=cortex-a75 -mcpu=cortex_a75 -fno-sanitize-trap=undefined -fno-sanitize=undefined -v $@' >> zxx
    sudo chmod +x zxx
    echo $'#!/bin/sh \n zig ar -v $@' >> zar
    sudo chmod +x zar
    export CC="zcc"
    export CXX="zxx"
    export AR="zar"
    export GOOS="windows"
    export GOARCH="arm64"
    export GOARM=7
    export CGO_ENABLED="1"
    go build -ldflags="-s -w" -o storj_uplink.dll -buildmode c-shared -tags extended -v
    echo "Build succeeded"
    ls -al
    echo "*** Hole pdb"
    cd ..
    find /home/vsts/ -type f | grep -i pdb$ | xargs -i cp {} uplink-c
  displayName: 'Test-Generate Win-ARM'

- task: PublishPipelineArtifact@1
  inputs:
      targetPath: 'uplink-c/storj_uplink.dll'
      artifact: 'arm64_dll'
      publishLocation: 'pipeline'
  displayName: 'Publish DLL as Artifact'

- task: PublishPipelineArtifact@1
  inputs:
      targetPath: 'uplink-c/storj_uplink.pdb'
      artifact: 'arm64_dll_pdb'
      publishLocation: 'pipeline'
  displayName: 'Publish PDB as Artifact'