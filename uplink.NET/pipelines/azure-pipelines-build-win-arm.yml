# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-20.04'

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'specific'
    project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
    definition: '31'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    itemPattern: |
      **
      !*.cs
      !*.dll
      !win-x86-dll
      !win-x64-dll
      !Csharp-files
    targetPath: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get build-artifacts'

- script: |
    ls
    ls uplink-c
    mv storj_uplink_second_wrap/storj_uplink_second_wrap.c uplink-c/storj_uplink_second_wrap.c
  displayName: 'Add SWIG-Code'

- task: GoTool@0
  inputs:
    version: '$(GOLANG_VERSION)'
  displayName: 'Install Go $(GOLANG_VERSION)'

- script: |
    sudo snap install zig --classic --edge
    zig version
  displayName: 'Install Zig'

- script: |
    cd uplink-c
    export PATH=$PATH:$(pwd)
    echo "Kann ersetzt werden durch 'zig cc'"
    echo $'#!/bin/sh \n zig cc -target aarch64-windows-gnu -mtune=cortex-a75 -mcpu=cortex_a75 -fno-sanitize-trap=undefined -fno-sanitize=undefined -v $@' >> zcc
    sudo chmod +x zcc
    echo $'#!/bin/sh \n zig c++ -target aarch64-windows-gnu -mtune=cortex-a75 -mcpu=cortex_a75 -fno-sanitize-trap=undefined -fno-sanitize=undefined -v $@' >> zxx
    sudo chmod +x zxx
    echo $'#!/bin/sh \n zig ar -v $@' >> zar
    sudo chmod +x zar
    export CC="zcc"
    export CXX="zxx"
    export AR="zar"
    export GOOS="windows"
    export GOARCH="arm64"
    export GOARM=7
    export CGO_ENABLED="1"
    echo "listing deps"
    go list -deps
    echo "done listing deps"
    #vorher: go build -ldflags="-s -w -c" -gcflags="-dwarflocationlists=true" -gcflags=all="-N -l" -o storj_uplink.dll -buildmode c-shared -tags extended -v
    go build -ldflags="-s -w -c -APPCONTAINER WindowsApp.lib" -gcflags="-dwarflocationlists=true -DWINAPI_FAMILY=WINAPI_FAMILY_APP -D_WIN32_WINNT=0x0A00" -gcflags=all="-N -l" -o storj_uplink.dll -buildmode c-shared -tags extended -v
    echo "Build succeeded"
    ls -al
    echo "*** Hole pdb"
    cd ..
    find /home/vsts/ -type f | grep -i pdb$ | xargs -i cp {} uplink-c
  displayName: 'Test-Generate Win-ARM'

- task: PublishPipelineArtifact@1
  inputs:
      targetPath: 'uplink-c/storj_uplink.dll'
      artifact: 'arm64_dll'
      publishLocation: 'pipeline'
  displayName: 'Publish DLL as Artifact'

- task: PublishPipelineArtifact@1
  inputs:
      targetPath: 'uplink-c/storj_uplink.pdb'
      artifact: 'arm64_dll_pdb'
      publishLocation: 'pipeline'
  displayName: 'Publish PDB as Artifact'