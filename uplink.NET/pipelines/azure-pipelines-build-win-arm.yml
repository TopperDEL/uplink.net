# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-20.04'

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'specific'
    project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
    definition: '31'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    itemPattern: |
      **
      !*.cs
      !*.dll
      !win-x86-dll
      !win-x64-dll
      !Csharp-files
    targetPath: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get build-artifacts'

- script: |
    ls
    ls uplink-c
    mv storj_uplink_second_wrap/storj_uplink_second_wrap.c uplink-c/storj_uplink_second_wrap.c
  displayName: 'Prepare for Target ARM'

- task: GoTool@0
  inputs:
    version: '$(GOLANG_VERSION)'
  displayName: 'Install Go $(GOLANG_VERSION)'

- script: |
    go get -v golang.org/dl/go1.17rc2
    /home/vsts/go/bin/go1.17rc2 download
    /home/vsts/go/bin/go1.17rc2 version
  displayName: 'Run SWIG to generate a c-file necessary for the DLL'


- script: |
    sudo apt-get update
    sudo snap install zig --classic --beta
    zig version
    zig targets
    echo "#!/bin/sh zig cc $@" >> zcc.sh
    echo "test"
    bash zcc.sh version
    echto "test done"
    #sudo apt-get install g++-arm-linux-gnueabi
    #sudo apt-get install gcc-arm*
    #sudo apt-get install ia32-libs
    cd /usr/bin
  displayName: 'Install cross compiler for Windows'

- script: |
    cd uplink-c
    export CC="zcc -target aarch64-windows-gnu"
    export CXX="zig c++ -target aarch64-windows-gnu"
    export GOOS="windows"
    export GOARCH="arm64"
    export GOARM=7
    export CGO_ENABLED="1"
    /home/vsts/go/bin/go1.17rc2 build --tags extended -ldflags="-s -w" -o storj_uplink.dll -buildmode c-shared
  displayName: 'Test-Generate Win-ARM'
