# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

stages:
- stage: MacCatalyst
  pool:
    vmImage: 'macos-latest'
  jobs:
    - job: MacCatalyst

      steps:

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
          definition: '31'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          itemPattern: |
            **
            !*.cs
            !*.dll
            !win-x86-dll
            !win-x64-dll
            !Csharp-files
          targetPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Get build-artifacts'

      - script: |
          ls
          ls uplink-c
          mv storj_uplink_second_wrap/storj_uplink_second_wrap.c uplink-c/storj_uplink_second_wrap.c
          export CGO_ENABLED=1
          export GOARCH=amd64
          export CGO_CFLAGS="-target x86_64-apple-ios-macabi -arch arm64 -arch x86_64 -isysroot `xcrun --sdk macosx --show-sdk-path` -miphoneos-version-min=13.0 -fembed-bitcode"
        displayName: 'Prepare for Target MacCatalyst'

      - task: Go@0
        inputs:
          command: 'build'
          arguments: '-buildmode c-shared -o storj_uplink-maccatalyst.dylib'
          workingDirectory: '$(System.DefaultWorkingDirectory)/uplink-c'
        displayName: 'Build MacCatalyst - x86_64'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/uplink-c/storj_uplink-maccatalyst.dylib'
          artifact: 'apple_maccatalyst'
          publishLocation: 'pipeline'
        displayName: 'Publish storj_uplink-maccatalyst.dylib'

      # - script: |
          # cd uplink-c
          # export CGO_ENABLED=1
          # export GOARCH=arm64
          # go build -buildmode c-shared -o storj_uplink-maccatalyst-arm64.dylib
          # cd ..
        # displayName: 'Prepare and build for Target MacCatalyst ARM64'

      # - task: PublishPipelineArtifact@1
        # inputs:
          # targetPath: '$(System.DefaultWorkingDirectory)/uplink-c/storj_uplink-maccatalyst-arm64.dylib'
          # artifact: 'apple_maccatalyst_arm64'
          # publishLocation: 'pipeline'
        # displayName: 'Publish storj_uplink-maccatalyst-arm64.dylib'

      # - script: |
          # cd uplink-c
          # lipo -create -output "libstorj_uplink-maccatalyst.dylib" "storj_uplink-maccatalyst.dylib" "storj_uplink-maccatalyst-arm64.dylib"
          # ls -l
          # echo 'File-Info'
          # file libstorj_uplink-maccatalyst.dylib
          # echo 'lipo info'
          # lipo -info libstorj_uplink-maccatalyst.dylib 
          # echo 'OTOOL'
          # otool -L libstorj_uplink-maccatalyst.dylib
        # displayName: 'Create fat-lib for x86_64 and ARM64'

      # - task: PublishPipelineArtifact@1
        # inputs:
          # targetPath: '$(System.DefaultWorkingDirectory)/uplink-c/libstorj_uplink-maccatalyst.dylib'
          # artifact: 'apple_maccatalyst_fat'
          # publishLocation: 'pipeline'
        # displayName: 'Publish libstorj_uplink-maccatalyst.dylib'

# - stage: nuget_pack_maccatalyst
  # pool:
    # vmImage: 'ubuntu-20.04'
  # jobs:
    # - job: nuget_pack_maccatalyst
      # steps:

      # - script: |
          # ls -l
        # displayName: 'List content'

      # - task: DownloadPipelineArtifact@2
        # inputs:
          # buildType: 'current'
          # artifactName: 'apple_macos_fat'
          # targetPath: '$(System.DefaultWorkingDirectory)'
        # displayName: 'Get build-artifacts (MacOS-fat-dylib)'

      # - task: DownloadPipelineArtifact@2
        # inputs:
          # buildType: 'specific'
          # project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
          # definition: '31'
          # specificBuildWithTriggering: true
          # buildVersionToDownload: 'latest'
          # artifactName: 'nuspec'
          # itemPattern: '**'
          # targetPath: '$(System.DefaultWorkingDirectory)'
        # displayName: 'Get build-artifacts (nuspec)'

      # - script: |
          # ls -l
          # mkdir osx-x64
          # cp libstorj_uplink.dylib osx-x64/
          # mv libstorj_uplink.dylib xamarinmac/libstorj_uplink.framework/storj_uplink
        # displayName: 'Copy binaries to nuget-location'

      # - task: NuGetToolInstaller@1
        # inputs:
          # versionSpec: '5.8.0'

      # - task: NuGetCommand@2
        # inputs:
          # command: 'pack'
          # packagesToPack: 'uplink.NET.Mac.nuspec'
          # packDestination: '$(System.DefaultWorkingDirectory)'
          # versioningScheme: 'off'
        # displayName: 'Pack the MacOS-Nuget'

      # - script: |
          # mkdir nuget
          # mv *.nupkg nuget
          # ls
        # displayName: 'Copy binaries to nuget-location'

      # - task: PublishPipelineArtifact@1
        # inputs:
          # targetPath: 'nuget'
          # artifact: 'nuget_mac'
          # publishLocation: 'pipeline'
        # displayName: 'Publish MacOS-Nuget as Artifact'

      # - task: NuGetCommand@2
        # inputs:
          # command: 'push'
          # packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;!$(System.DefaultWorkingDirectory)/**/*.symbols.nupkg'
          # nuGetFeedType: 'external'
          # publishFeedCredentials: 'NugetOrg'
        # displayName: 'Publish to Nuget.org'