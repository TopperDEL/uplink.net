# azure-pipelines-pack-win.yml

trigger:
- main

stages:
- stage: nuget_pack
  displayName: 'Pack & Publish Windows NuGet'
  jobs:
  - job: pack
    displayName: 'Pack Windows NuGet'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      # Adjust these if your paths differ
      ProjectPattern: '**/uplink.NET.csproj'                  # <— point to your actual .csproj (glob OK)
      NuspecPath: '$(System.DefaultWorkingDirectory)/uplink.NET.nuspec'
      WinBinArtifactName: 'win_binaries'                      # <— name of your produced Windows artifact
      WinBinDownloadPath: '$(Pipeline.Workspace)/win'         # download location for that artifact
      NuGetOutDir: '$(Build.ArtifactStagingDirectory)/nuget'  # where .nupkg/.snupkg will be written

    steps:
    - checkout: self

    # Pin SDK to avoid accidental upgrades (choose the LTS your repo expects)
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 6.x (LTS)'
      inputs:
        packageType: 'sdk'
        version: '6.0.x'

    - task: NuGetAuthenticate@1
      displayName: 'Authenticate to feeds (NuGet)'

    # Pull in the Windows binaries built elsewhere (previous stage/pipeline)
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Windows binaries'
      inputs:
        buildType: 'current'
        artifact: '$(WinBinArtifactName)'
        path: '$(WinBinDownloadPath)'

    # Stage the Windows binaries under ./nuget so the .nuspec can include them
    - script: |
        set -euxo pipefail
        mkdir -p "$(NuGetOutDir)"
        mkdir -p "$(System.DefaultWorkingDirectory)/nuget/runtimes/win-x64/native"
        cp -R "$(WinBinDownloadPath)"/. "$(System.DefaultWorkingDirectory)/nuget/runtimes/win-x64/native/" || true
        echo "Staged files:"
        find "$(System.DefaultWorkingDirectory)/nuget" -type f | sed 's|^|  - |'
      displayName: 'Stage Windows binaries for packing'

    # IMPORTANT: pack via .csproj and *also* pass your .nuspec to include the staged files
    - task: DotNetCoreCLI@2
      displayName: 'Pack (.csproj + NuspecFile) — no build'
      inputs:
        command: 'pack'
        packagesToPack: '$(ProjectPattern)'           # must be a project/solution
        packDirectory: '$(NuGetOutDir)'
        nobuild: true                                 # we only pack; binaries were produced elsewhere
        includesymbols: true
        buildProperties: |
          NuspecFile=$(NuspecPath)
          SymbolPackageFormat=snupkg

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Windows NuGet as artifact'
      inputs:
        targetPath: '$(NuGetOutDir)'
        artifact: 'nuget_win'
        publishLocation: 'pipeline'

    - task: DotNetCoreCLI@2
      displayName: 'Push to nuget.org'
      inputs:
        command: 'push'
        packagesToPush: '$(NuGetOutDir)/*.nupkg;!$(NuGetOutDir)/*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'NugetOrg'            # service connection in Azure DevOps
        # arguments: '--skip-duplicate'               # uncomment if you want idempotent pushes
