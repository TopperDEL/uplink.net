# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyy)

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    git clone --depth 1 https://github.com/TopperDEL/uplink.net.git
  displayName: 'Clone uplink.NET'
- script: |
    sed -i 's/STORJVERSION/$(STORJ_VERSION)/' uplink.net/SWIG/storj_uplink_second.i
  displayName: 'Inject the Storj-Version'
- script: |
    sed -i 's/GOVERSION/$(GOLANG_VERSION)/' uplink.net/SWIG/storj_uplink_second.i
  displayName: 'Inject the Go-Version'
- script: |
    echo 'Cloning $(STORJ_VERSION)'
    git clone https://github.com/storj/uplink-c.git
    cd uplink-c
    git checkout $(STORJ_VERSION)
    cd ..
  displayName: 'Clone uplink-c $(STORJ_VERSION)'
- script: |
    cp uplink.net/SWIG/*.i uplink-c
    cp uplink.net/GO/*.go uplink-c
  displayName: 'Copy specific files to uplink-c'
- script: |
    swig -csharp -namespace uplink.SWIG uplink-c/storj_uplink_first.i
  displayName: 'Run SWIG to generate a c-file necessary for the DLL'
- task: GoTool@0
  inputs:
    version: '$(GOLANG_VERSION)'
  displayName: 'Install Go $(GOLANG_VERSION)'
- script: |
    sudo apt-get update
    sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
  displayName: 'Install cross-compiler for Windows and Linux ARM64'
- script: |
    sudo snap install zig --classic --beta
  displayName: 'Install zig'
- script: |
    cd uplink-c
    export CC="x86_64-w64-mingw32-gcc"
    export CXX="x86_64-w64-mingw32-g++"
    export GOOS="windows"
    export GOARCH="amd64"
    export CGO_ENABLED="1"
    go build -ldflags="-s -w '-extldflags=-Wl,--dynamicbase,--high-entropy-va'" -o storj_uplink.dll -buildmode c-shared
  displayName: 'Generating Windows-x64-DLL for the first time - we need an additional h-file'
- script: |
    cd uplink-c
    rm *.cs
    rm *.c
    rm *.dll
  displayName: 'Cleanup - remove some created files'
- script: |
    sed -i '/GoComplex/d' uplink-c/storj_uplink.h
    sed -i '/pointer_matching_GoInt/d' uplink-c/storj_uplink.h
  displayName: 'Remove some types that lead to errors with SWIG'
- script: |
    sed -i 's/__declspec(dllexport)//' uplink-c/storj_uplink.h
    cat -n uplink-c/storj_uplink.h
    swig -csharp -namespace uplink.SWIG uplink-c/storj_uplink_second.i
  displayName: 'Running SWIG again with the second i-file. It includes more typemaps.'
- script: |
    cd uplink-c
    export ZIG_CC="zig cc"  # Set Zig as C compiler
    export ZIG_CXX="zig c++"  # Set Zig as C++ compiler
    # For Zig, specify the target using -target and other relevant flags directly in the CC and CXX commands
    export CC="${ZIG_CC} -target aarch64-windows-gnu"  # Updated to use Zig for ARM64 Windows
    export CXX="${ZIG_CXX} -target aarch64-windows-gnu"  # Updated to use Zig for ARM64 Windows
    export GOOS="windows"
    export GOARCH="arm64"  # Confirming target architecture for Go
    export CGO_ENABLED="1"
    # Include any necessary flags. Note: Zig's linker will handle most cross-compilation concerns.
    export CGO_CFLAGS="-g"
    export CGO_CXXFLAGS="-g"
    export CGO_FFLAGS="-g"
    export CGO_LDFLAGS="-g"
    # Build command remains the same, leveraging environment variables for cross-compilation
    go build -ldflags="-s -w '-extldflags=-Wl,--dynamicbase'" -o storj_uplink-arm64.dll -buildmode c-shared
  displayName: 'Generating the final-ARM64-DLL for Windows with Zig toolchain'
- script: |
    cd uplink-c
    export CC="i686-w64-mingw32-gcc"
    export CXX="i686-w64-mingw32-g++"
    export GOOS="windows"
    export GOARCH="386"
    export CGO_ENABLED="1"
    export CGO_CFLAGS="-g -Wl,--kill-at"
    export CGO_CXXFLAGS="-g -Wl,--kill-at"
    export CGO_FFLAGS="-g -Wl,--kill-at"
    export CGO_LDFLAGS="-g -Wl,--kill-at"
    go build -ldflags="-s -w '-extldflags=-Wl,--dynamicbase'" -o storj_uplink-x86.dll -buildmode c-shared
  displayName: 'Generating the final-x86-DLL for Windows'
- script: |
    cd uplink-c
    export CC="x86_64-w64-mingw32-gcc"
    export CXX="x86_64-w64-mingw32-g++"
    export GOOS="windows"
    export GOARCH="amd64"
    export CGO_ENABLED="1"
    export CGO_CFLAGS="-g -O2"
    export CGO_CXXFLAGS="-g -O2"
    export CGO_FFLAGS="-g -O2"
    export CGO_LDFLAGS="-g -O2"
    go build -ldflags="-s -w '-extldflags=-Wl,--dynamicbase,--high-entropy-va'" -o storj_uplink-x64.dll -buildmode c-shared
  displayName: 'Generating the final-x64-DLL for Windows'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'uplink-c/storj_uplink.h'
    artifact: 'storj_uplink'
    publishLocation: 'pipeline'
  displayName: 'Publish storj_uplink.h'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'uplink-c/storj_uplink_second_wrap.c'
    artifact: 'storj_uplink_second_wrap'
    publishLocation: 'pipeline'
  displayName: 'Publish storj_uplink_second_wrap.c'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'uplink-c/storj_uplink-arm64.dll'
    artifact: 'win-arm64-dll'
    publishLocation: 'pipeline'
  displayName: 'Publish win-arm64-dll'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'uplink-c/storj_uplink-x86.dll'
    artifact: 'win-x86-dll'
    publishLocation: 'pipeline'
  displayName: 'Publish win-x86-dll'
