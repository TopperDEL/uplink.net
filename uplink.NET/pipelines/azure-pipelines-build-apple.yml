# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

stages:
- stage: MacOS
  pool:
    vmImage: 'macos-latest'
  jobs:
    - job: MacOS

      steps:

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
          definition: '31'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          itemPattern: |
            **
            !*.cs
            !*.dll
            !win-x86-dll
            !win-x64-dll
            !Csharp-files
          targetPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Get build-artifacts'

      - script: |
          ls
          ls uplink-c
          mv storj_uplink_second_wrap/storj_uplink_second_wrap.c uplink-c/storj_uplink_second_wrap.c
          export CGO_ENABLED=1
          export GOARCH=amd64
        displayName: 'Prepare for Target MacOS'

      - task: Go@0
        inputs:
          command: 'build'
          arguments: '-buildmode c-shared -o storj_uplink-macos.dylib'
          workingDirectory: '$(System.DefaultWorkingDirectory)/uplink-c'
        displayName: 'Build MacOS'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/uplink-c/storj_uplink-macos.dylib'
          artifact: 'apple_macos'
          publishLocation: 'pipeline'
        displayName: 'Publish storj_uplink-macos.dylib'

- stage: nuget_pack_mac
  pool:
    vmImage: 'ubuntu-20.04'
  jobs:
    - job: nuget_pack_mac
      steps:

      - script: |
          ls -l
        displayName: 'List content'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'apple_macos'
          targetPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Get build-artifacts (MacOS-dylib)'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
          definition: '31'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          artifactName: 'nuspec'
          itemPattern: '**'
          targetPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Get build-artifacts (nuspec)'

      - script: |
          ls -l
          mv storj_uplink-macos.dylib xamarinmac/libstorj_uplink.framework/storj_uplink
        displayName: 'Copy binaries to nuget-location'

      - task: NuGetCommand@2
        inputs:
          command: 'pack'
          packagesToPack: 'uplink.NET.Mac.nuspec'
          packDestination: '$(System.DefaultWorkingDirectory)'
          versioningScheme: 'off'
        displayName: 'Pack the MacOS-Nuget'

      - script: |
          mkdir nuget
          mv *.nupkg nuget
          ls
        displayName: 'Copy binaries to nuget-location'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'nuget'
          artifact: 'nuget_mac'
          publishLocation: 'pipeline'
        displayName: 'Publish MacOS-Nuget as Artifact'

      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;!$(System.DefaultWorkingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2/b62f932e-9093-4aad-843e-fde82bd3845f'
        displayName: 'Publish to Dev-Feed'

- stage: iOs
  pool:
    vmImage: 'macos-latest'
  jobs:
    - job: iOs
      steps:

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
          definition: '31'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          itemPattern: |
            **
            !*.cs
            !*.dll
            !win-x86-dll
            !win-x64-dll
            !Csharp-files
          targetPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Get build-artifacts'

      - script: |
          ls
          mv storj_uplink_second_wrap/storj_uplink_second_wrap.c uplink-c/storj_uplink_second_wrap.c
          cd uplink-c
          ls
          env \
          GOOS='darwin' \
          CC=cc \
          CXX=c++ \
          CGO_ENABLED=1 \
          GOARCH=arm64 \
          CGO_CFLAGS="-arch arm64 -fpic -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk -miphoneos-version-min=12.0" \
          CGO_LDFLAGS="-arch arm64 -dynamic -fpic -shared -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk -miphoneos-version-min=12.0" \
          go build -ldflags -w -v -tags ios -o "storj_uplink-arm64.a" -buildmode=c-archive
        displayName: 'Prepare and build target iOs arm64'

      - script: |
          echo 'Running xcrun...'
          xcrun -sdk iphoneos clang -arch arm64 -fpic -shared -Wl,-all_load "uplink-c/storj_uplink-arm64.a" -framework Corefoundation -o "uplink-c/storj_uplink.dylib" --verbose
          echo 'Removing archive...'
          rm "uplink-c/storj_uplink-arm64.a"
          echo 'Running install_name_tool'
          install_name_tool -id "@rpath/storj_uplink.framework/storj_uplink" "uplink-c/storj_uplink.dylib"
        displayName: 'Generate Framework for arm64'

      - script: |
          cd uplink-c
          env \
          GOOS='darwin' \
          CC=cc \
          CXX=c++ \
          CGO_ENABLED=1 \
          GOARCH=amd64 \
          CGO_CFLAGS="-arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk" \
          CGO_LDFLAGS="-arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk" \
          go build -ldflags -w -v -tags ios -o "storj_uplink-simx64.dylib" -buildmode=c-shared
        displayName: 'Prepare and build target iOs simx64'

      - script: |
          lipo -create -output "storj_uplink.dylib" "uplink-c/storj_uplink-simx64.dylib" "uplink-c/storj_uplink.dylib"
          #install_name_tool -id "@rpath/storj_uplink.framework/storj_uplink" "storj_uplink.dylib"
          ls -l
          echo 'File-Info'
          file storj_uplink.dylib
          echo 'lipo info'
          lipo -info storj_uplink.dylib 
          echo 'OTOOL'
          otool -L storj_uplink.dylib
        displayName: 'Create fat library containing all iOs-architectures'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/storj_uplink.dylib'
          artifact: 'apple_ios'
          publishLocation: 'pipeline'
        displayName: 'Publish storj_uplink.dylib'

- stage: nuget_pack_ios
  pool:
    vmImage: 'ubuntu-20.04'
  jobs:
    - job: nuget_pack_ios
      steps:

      - script: |
          ls -l
        displayName: 'List content'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'apple_ios'
          targetPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Get build-artifacts (iOs-dylib)'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2'
          definition: '31'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          artifactName: 'nuspec'
          itemPattern: '**'
          targetPath: '$(System.DefaultWorkingDirectory)'
        displayName: 'Get build-artifacts (nuspec)'

      - script: |
          ls -l
          mv storj_uplink.dylib xamarinios/storj_uplink.framework/storj_uplink
        displayName: 'Copy binaries to nuget-location'

      - task: NuGetCommand@2
        inputs:
          command: 'pack'
          packagesToPack: 'uplink.NET.iOs.nuspec'
          packDestination: '$(System.DefaultWorkingDirectory)'
          versioningScheme: 'off'
        displayName: 'Pack the iOs-Nuget'

      - script: |
          mkdir nuget
          mv *.nupkg nuget
          ls
        displayName: 'Copy binaries to nuget-location'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'nuget'
          artifact: 'nuget_ios'
          publishLocation: 'pipeline'
        displayName: 'Publish iOs-Nuget as Artifact'

      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;!$(System.DefaultWorkingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: '9ac1e3a1-e687-4aa6-ab2b-0108d21425e2/b62f932e-9093-4aad-843e-fde82bd3845f'
        displayName: 'Publish to Dev-Feed'
        
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;!$(System.DefaultWorkingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'NugetOrg'
        displayName: 'Publish to Nuget.org'